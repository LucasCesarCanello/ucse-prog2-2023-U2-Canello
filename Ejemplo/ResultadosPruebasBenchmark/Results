23:31:26: Executing ':StreamBenchmark.main()'...

> Task :compileJava UP-TO-DATE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :StreamBenchmark.main()
# JMH version: 1.33
# VM version: JDK 21.0.3, OpenJDK 64-Bit Server VM, 21.0.3+9-LTS
# VM invoker: C:\Users\Usuario\.jdks\azul-21.0.3\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=AR -Duser.language=es -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.example.StreamBenchmark.concurrencia

# Run progress: 0,00% complete, ETA 00:02:40
# Fork: 1 of 1
# Warmup Iteration   1: 9,250 ops/s
# Warmup Iteration   2: 9,572 ops/s
# Warmup Iteration   3: 9,570 ops/s
Iteration   1: 9,338 ops/s
Iteration   2: 9,414 ops/s
Iteration   3: 9,187 ops/s
Iteration   4: 9,367 ops/s
Iteration   5: 9,229 ops/s


Result "org.example.StreamBenchmark.concurrencia":
  9,307 �(99.9%) 0,367 ops/s [Average]
  (min, avg, max) = (9,187, 9,307, 9,414), stdev = 0,095
  CI (99.9%): [8,940, 9,674] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 21.0.3, OpenJDK 64-Bit Server VM, 21.0.3+9-LTS
# VM invoker: C:\Users\Usuario\.jdks\azul-21.0.3\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=AR -Duser.language=es -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.example.StreamBenchmark.paralelismo

# Run progress: 50,00% complete, ETA 00:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 15,432 ops/s
# Warmup Iteration   2: 14,276 ops/s
# Warmup Iteration   3: 11,774 ops/s
Iteration   1: 10,865 ops/s
Iteration   2: 13,899 ops/s
Iteration   3: 13,215 ops/s
Iteration   4: 13,170 ops/s
Iteration   5: 13,712 ops/s


Result "org.example.StreamBenchmark.paralelismo":
  12,972 �(99.9%) 4,694 ops/s [Average]
  (min, avg, max) = (10,865, 12,972, 13,899), stdev = 1,219
  CI (99.9%): [8,279, 17,666] (assumes normal distribution)


# Run complete. Total time: 00:02:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      Mode  Cnt   Score   Error  Units
StreamBenchmark.concurrencia  thrpt    5   9,307 � 0,367  ops/s
StreamBenchmark.paralelismo   thrpt    5  12,972 � 4,694  ops/s

Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/8.5/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD SUCCESSFUL in 2m 43s
2 actionable tasks: 1 executed, 1 up-to-date
23:34:10: Execution finished ':StreamBenchmark.main()'.